ТЕХНИЧЕСКОЕ ОПИСАНИЕ ПО СОЗДАНИЮ СИНХРОНИЗИРОВАННОГО БАННЕРА

Принятые обозначения:
[bg]       - [Layer Name]
[button]   - [Layer Name]
[waiting]  - [Layer Name]




1. SWF файлы должены быть скомпилированы в 6, 7 или 8 версии флеша.
2. Во флешках во всех отображаемых кадрах должен присутствовать сплошной фон [Layer Name = bg], по ширине и высоте соответствующий формату баннера.
3. Название файла должно начинаться с его размеров и версии флеша в которой он скомпилирован (6, 7 или 8) шаблон: <width>x<height>_v<flash_ver>_<creative_name>.swf например: 730x90_v7_somename.swf 
Сохранять через "Save as..." TYPE="8-Flash", без компрессии. (причем рассматривается 8-й Флеш как максимум, тоесть когда технически невозможно сохранить файл в версиях ниже. По возможности используйте для сохранения версию-6).
4. В баннерах должна присутствовать кнопка (button) для перехода по клику. Кнопка должна содержать следующий код:

*** ВИКОРИСТАТИ НАШ "КОД"

---------------------------------------
on (release) {
getURL(_root.link1, "_blank");
}
---------------------------------------
5. В первом кадре роликов должен присутсвовать следующий код:
---------------------------------------
if (_root.fdomain != undefined){
System.security.allowDomain(fdomain);
}
---------------------------------------

6. Вместе с swf файлом должна предоставляться gif или jpeg заглушка тех же линейных размеров (высота, ширина)
7. Вес каждого элемента (swf, заглушка) согласовывается с менеджером.
8. В баннерах должен находится код синхронизации с использованием LocalConnection. (Аналогичный приведенному в примере sync_banner_example.zip)

Внимание! Соответствие кода синхронизации коду приведенному в качестве примера в данном пункте не является признаком корректности баннера. Корректность синхронизации баннеров определяется пунктом 9 данных требований.

9. Корректность синхронизации баннеров можно проверить, используя файл _test.html. (Запустить, указать пути к синхронным баннерам и их размеры, после чего, последовательно запустить тесты, кликнув по соответствующим ссылкам, баннеры должны синхронно проигрываться в обоих тестах).



ЛОГИКА:
Рассматривается вариант когда есть два флеш файла, которые необходимо между собой синхронизировать. 
Для этого в каждый из них необходимо встроить скрипты синхронизации.
Ниже новодятся базовые коды скриптов отработки для фреймов.

Фрейм-1 -- загрузка скрипта синхронизации в каждом банере "[1000x90] - FRAME_1" и "[200x400] - FRAME_1". Для получения времени активашии и последуушей синхронизации. Тоесть тот файл который загрузился первым ждет пока полностью не загрузится второй ([1000x90] ждет полной загрузки [200x400]) или наоборот ([200x400] ждет полной загрузки [1000x90]).
Фрейм-1 -- В обоих флешках во всех отображаемых кадрах должен присутствовать сплошной фон [Layer Name = bg], по ширине и высоте соответствующий формату баннера и начинатся именно с первого фрейма. Характеристики фона зависят от креатива. Концептуально фон может даже быть и градиентом с переходом в прозрачность, но ОН ДОЛЖЕН БЫТЬ СПЛОШНЫМ!.
Фрейм-2 -- синхронизация скрипта синхронизации в каждом банере "[1000x90] - FRAME_2" и "[200x400] - FRAME_2". Для того чтобы определить загружен ли парно второй (первый) баннер и синхронизации их старта.
Фрейм-3 -- "start_point" в данном случае пустой фон на обоих баннерах. Нужно для того чтобы на машине клиента (если у него не очень крутой процессор) браузер импользовал это время для буферизации ролика. Фактически это технологическая пауза. Если вы уверены что ваши баннеры будут отрабатывать на 100% корректно У ВСЕХ - можете убрать этот фрейм.
Фрейм-4 -- "start_point" 
Фрейм-4 -- Для втогого баннера
Фрейм-5 -- НАЧАЛО КРЕАТИВА КАЖДОГО БАНЕРА.




=========================================================================================
----- [1000x90] - FRAME_1 --------------------
var LoadTimerId:Number;
if (_root.fdomain != undefined) {
	System.security.allowDomain(fdomain);
}
function LoadCheck() {
	if (getBytesLoaded()>=getBytesTotal()) {
		clearInterval(LoadTimerId);
		play();
	}
}
LoadTimerId = setInterval(this, "LoadCheck", 100);
stop();
----- [1000x90] - FRAME_1 END ----------------

----- [200x400] - FRAME_1 --------------------
var LoadTimerId:Number;
if (_root.fdomain != undefined) {
	System.security.allowDomain(fdomain);
}
function LoadCheck() {
	if (getBytesLoaded()>=getBytesTotal()) {
		clearInterval(LoadTimerId);
		play();
	}
}
LoadTimerId = setInterval(this, "LoadCheck", 100);
stop();
----- [200x400] - FRAME_1 END ----------------
=========================================================================================
----- [1000x90] - FRAME_2 --------------------
var SyncTimerId:Number;
var SyncMaster:LocalConnection = new LocalConnection();
SyncMaster.allowDomain = function(sendingDomain:String) {
	return true;
};
SyncMaster.fStart = function() {
	clearInterval(SyncTimerId);
	gotoAndPlay("start_point");
};
SyncMaster.connect("_imSync1");
function SyncCheck() {
	SyncMaster.send("_imSync2", "fStart");
}
SyncTimerId = setInterval(this, "SyncCheck", 100);
stop();
----- [1000x90] - FRAME_2 END ---------------

----- [200x400] - FRAME_2 --------------------
var SyncMaster:LocalConnection = new LocalConnection();
SyncMaster.allowDomain = function(sendingDomain:String) {
	return true;
};
SyncMaster.fStart = function() {
	SyncMaster.send("_imSync1", "fStart");
	gotoAndPlay("start_point");
};
SyncMaster.fSyncPoint1 = function() {
	gotoAndPlay("sync_point1");
};
SyncMaster.connect("_imSync2");
stop();
----- [200x400] - FRAME_2 END ---------------
=========================================================================================
----- [1000x90] - FRAME_25 --------------------
SyncMaster.send("_imSync2", "fSyncPoint1");
----- [1000x90] - FRAME_25 END ---------------

----- [200x400] - FRAME_25 --------------------
stop();
----- [200x400] - FRAME_25 END ---------------
=========================================================================================
----- [1000x90] - FRAME_65 --------------------
stop();
----- [1000x90] - FRAME_65 END ---------------

----- [200x400] - FRAME_65 --------------------
SyncMaster.send("_imSync1", "fStart");
gotoAndPlay("start_point");
----- [200x400] - FRAME_65 END ---------------
=========================================================================================













ОПТИМАЛЬНАЯ ЛОГИКА:
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]















